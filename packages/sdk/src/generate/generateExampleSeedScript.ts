import { writeFile } from 'fs-extra'
import path from 'path'
import { IntrospectedStructure } from '~/db/introspect/introspectDatabase.js'
import { DataModel } from '~/generateOrm/dataModel/dataModel.js'
import { topologicalSort } from '~/sort.js'

export interface GenerateExampleSeedScriptContext {
  dataModel: DataModel
  introspection: IntrospectedStructure
}

export const EXAMPLE_SEED_SCRIPT_FILE_NAME = 'seed.mts'

const getTopologicallyLastTable = (tables: IntrospectedStructure['tables']) => {
  let tablesToSort = [...tables].filter(
    (table) => table.schema === 'public' && table.name !== '_prisma_migrations'
  )

  if (tablesToSort.length === 0) {
    tablesToSort = tables
  }

  try {
    return [...topologicalSort(tablesToSort).values()].at(-1)!.node
  } catch {
    return tables[0]
  }
}

const getModelNameFromTable = (
  dataModel: DataModel,
  table: IntrospectedStructure['tables'][number]
) => {
  for (const modelName of Object.keys(dataModel.models)) {
    const model = dataModel.models[modelName]

    if (model.schemaName === table.schema && model.tableName === table.name) {
      return modelName
    }
  }

  return null
}

export const generateExampleSeedScriptContent = (
  context: GenerateExampleSeedScriptContext
) => {
  let sampleModelName = null

  if (context.introspection.tables.length > 0) {
    const sampleTable = getTopologicallyLastTable(context.introspection.tables)
    sampleModelName = getModelNameFromTable(context.dataModel, sampleTable)
  }

  return [
    `\
import { createSeedClient } from '@snaplet/seed';

// You can use @snaplet/copycat to generate fake data for a field, for example:
// \`\`\`
// await seed.users([{ email: ({ seed }) => copycat.email(seed) }])
// \`\`\`
// More on this in our docs: https://docs.snaplet.dev/core-concepts/seed#inside-the-snapletseed-workflow
import { copycat } from '@snaplet/copycat'

// This is a basic example generated by Snaplet to start you off, check out the docs for where to go from here
// * For more on getting started with @snaplet/seed: https://docs.snaplet.dev/getting-started/quick-start/seed
// * For a more detailed reference: https://docs.snaplet.dev/core-concepts/seed


const seed = await createSeedClient({
  dryRun: process.env.DRY !== '0',
});

// Clears all existing data in the database, but keep the structure
await seed.$resetDatabase()`,

    sampleModelName &&
      `
// This will create 3 records in the ${sampleModelName} table
// it reads ${sampleModelName} times(x) 3
await seed.${sampleModelName}(x => x(3))

// Run it with: DRY=0 npx tsx seed.mts
`,
  ]
    .filter(Boolean)
    .join('\n\n')
}

export const getExampleSeedScriptFilepath = () =>
  path.join(
    process.env.SNAPLET_CWD ?? process.cwd(),
    EXAMPLE_SEED_SCRIPT_FILE_NAME
  )

export const generateExampleSeedScript = async (
  context: GenerateExampleSeedScriptContext
) => {
  await writeFile(
    getExampleSeedScriptFilepath(),
    generateExampleSeedScriptContent(context)
  )
}
